#!/usr/bin/env ruby

#
# Copyright (c) 2014 Masayoshi Mizutani <muret@haeena.net>
# All rights reserved.
#  *
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions
# are met:
# 1. Redistributions of source code must retain the above copyright
#    notice, this list of conditions and the following disclaimer.
# 2. Redistributions in binary form must reproduce the above copyright
#    notice, this list of conditions and the following disclaimer in the
#    documentation and/or other materials provided with the distribution.
# 
# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
# ``AS IS'' AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED
# TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
# PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL THE FOUNDATION OR CONTRIBUTORS
# BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
# CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
# SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
# INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
# CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
# ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
# POSSIBILITY OF SUCH DAMAGE.
#

require 'wowlog'
require 'pp'
require 'time'
require 'optparse'

out_encode = false
out_dir = './'
psr = Wowlog::Parser.new

optpsr = OptionParser.new
optpsr.on('-m', 'output as msgpack encode') { |v| out_encode = v }
optpsr.on('-o VAL', 'output directory') { |val| out_dir = val }
argv = optpsr.parse(ARGV)

argv.each do |log_file|
  File.open(log_file, 'r') { |fd|
    out_fd = nil
    fname = nil
    STDOUT.sync = true
    ev_count = nil
    base_ts = nil

    fd.each { |line|
      if !(out_fd.nil?)
        out_fd.write(line)
      end

      ev = psr.parse_line(line)

      if ev['event'] == 'ENCOUNTER_START'
        ev_count = 0
        base_ts = ev['timestamp']

        enc_name = ev['encounterName'].gsub(/\s/, '_')
        dt = Time.at(ev['timestamp']).to_s.split(/\s/)
        dt_s = [dt[0].split('-').join(''), dt[1].split(':').join('')].join('_')

        fname = "WoWCombatLog_#{dt_s}_#{enc_name}_#{ev['groupSize']}man.txt"
        fpath = File.join(out_dir, fname)
        out_fd = File.open(fpath, "w")
        print "Extracting #{fpath}... "
      end

      ev_count += 1 unless ev_count.nil?


      if ev['event'] == 'ENCOUNTER_END'
        unless ev_count.nil?
          duration = ev['timestamp'] - base_ts
          puts "done (%d events, %d seconds)" % [ev_count, duration]
        else
          puts "done (no ENCOUNTER_START event)"
        end

        ev_count = nil
        base_ts = nil
        out_fd.close
        out_fd = nil
      end
    }
  }
end
